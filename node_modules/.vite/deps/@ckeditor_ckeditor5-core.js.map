{
  "version": 3,
  "sources": ["../../@ckeditor/ckeditor5-core/src/plugin.js", "../../@ckeditor/ckeditor5-core/src/command.js", "../../@ckeditor/ckeditor5-core/src/multicommand.js", "../../@ckeditor/ckeditor5-core/src/plugincollection.js", "../../@ckeditor/ckeditor5-core/src/context.js", "../../@ckeditor/ckeditor5-core/src/contextplugin.js", "../../@ckeditor/ckeditor5-core/src/commandcollection.js", "../../@ckeditor/ckeditor5-core/src/editingkeystrokehandler.js", "../../@ckeditor/ckeditor5-core/src/editor/editor.js", "../../@ckeditor/ckeditor5-core/src/editor/utils/attachtoform.js", "../../@ckeditor/ckeditor5-core/src/editor/utils/dataapimixin.js", "../../@ckeditor/ckeditor5-core/src/editor/utils/elementapimixin.js", "../../@ckeditor/ckeditor5-core/src/editor/utils/securesourceelement.js", "../../@ckeditor/ckeditor5-core/src/pendingactions.js", "../../@ckeditor/ckeditor5-core/src/index.js"],
  "sourcesContent": ["/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core/plugin\n */\n/* eslint-disable @typescript-eslint/no-invalid-void-type */\nimport { ObservableMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * The base class for CKEditor plugin classes.\n */\nexport default class Plugin extends ObservableMixin() {\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super();\n        /**\n         * Holds identifiers for {@link #forceDisabled} mechanism.\n         */\n        this._disableStack = new Set();\n        this.editor = editor;\n        this.set('isEnabled', true);\n    }\n    /**\n     * Disables the plugin.\n     *\n     * Plugin may be disabled by multiple features or algorithms (at once). When disabling a plugin, unique id should be passed\n     * (e.g. feature name). The same identifier should be used when {@link #clearForceDisabled enabling back} the plugin.\n     * The plugin becomes enabled only after all features {@link #clearForceDisabled enabled it back}.\n     *\n     * Disabling and enabling a plugin:\n     *\n     * ```ts\n     * plugin.isEnabled; // -> true\n     * plugin.forceDisabled( 'MyFeature' );\n     * plugin.isEnabled; // -> false\n     * plugin.clearForceDisabled( 'MyFeature' );\n     * plugin.isEnabled; // -> true\n     * ```\n     *\n     * Plugin disabled by multiple features:\n     *\n     * ```ts\n     * plugin.forceDisabled( 'MyFeature' );\n     * plugin.forceDisabled( 'OtherFeature' );\n     * plugin.clearForceDisabled( 'MyFeature' );\n     * plugin.isEnabled; // -> false\n     * plugin.clearForceDisabled( 'OtherFeature' );\n     * plugin.isEnabled; // -> true\n     * ```\n     *\n     * Multiple disabling with the same identifier is redundant:\n     *\n     * ```ts\n     * plugin.forceDisabled( 'MyFeature' );\n     * plugin.forceDisabled( 'MyFeature' );\n     * plugin.clearForceDisabled( 'MyFeature' );\n     * plugin.isEnabled; // -> true\n     * ```\n     *\n     * **Note:** some plugins or algorithms may have more complex logic when it comes to enabling or disabling certain plugins,\n     * so the plugin might be still disabled after {@link #clearForceDisabled} was used.\n     *\n     * @param id Unique identifier for disabling. Use the same id when {@link #clearForceDisabled enabling back} the plugin.\n     */\n    forceDisabled(id) {\n        this._disableStack.add(id);\n        if (this._disableStack.size == 1) {\n            this.on('set:isEnabled', forceDisable, { priority: 'highest' });\n            this.isEnabled = false;\n        }\n    }\n    /**\n     * Clears forced disable previously set through {@link #forceDisabled}. See {@link #forceDisabled}.\n     *\n     * @param id Unique identifier, equal to the one passed in {@link #forceDisabled} call.\n     */\n    clearForceDisabled(id) {\n        this._disableStack.delete(id);\n        if (this._disableStack.size == 0) {\n            this.off('set:isEnabled', forceDisable);\n            this.isEnabled = true;\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        this.stopListening();\n    }\n    /**\n     * @inheritDoc\n     */\n    static get isContextPlugin() {\n        return false;\n    }\n}\n/**\n * Helper function that forces plugin to be disabled.\n */\nfunction forceDisable(evt) {\n    evt.return = false;\n    evt.stop();\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core/command\n */\nimport { ObservableMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * Base class for the CKEditor commands.\n *\n * Commands are the main way to manipulate the editor contents and state. They are mostly used by UI elements (or by other\n * commands) to make changes in the model. Commands are available in every part of the code that has access to\n * the {@link module:core/editor/editor~Editor editor} instance.\n *\n * Instances of registered commands can be retrieved from {@link module:core/editor/editor~Editor#commands `editor.commands`}.\n * The easiest way to execute a command is through {@link module:core/editor/editor~Editor#execute `editor.execute()`}.\n *\n * By default, commands are disabled when the editor is in the {@link module:core/editor/editor~Editor#isReadOnly read-only} mode\n * but commands with the {@link module:core/command~Command#affectsData `affectsData`} flag set to `false` will not be disabled.\n */\nexport default class Command extends ObservableMixin() {\n    /**\n     * Creates a new `Command` instance.\n     *\n     * @param editor The editor on which this command will be used.\n     */\n    constructor(editor) {\n        super();\n        this.editor = editor;\n        this.set('value', undefined);\n        this.set('isEnabled', false);\n        this._affectsData = true;\n        this._isEnabledBasedOnSelection = true;\n        this._disableStack = new Set();\n        this.decorate('execute');\n        // By default, every command is refreshed when changes are applied to the model.\n        this.listenTo(this.editor.model.document, 'change', () => {\n            this.refresh();\n        });\n        this.listenTo(editor, 'change:isReadOnly', () => {\n            this.refresh();\n        });\n        // By default, commands are disabled if the selection is in non-editable place or editor is in read-only mode.\n        this.on('set:isEnabled', evt => {\n            if (!this.affectsData) {\n                return;\n            }\n            const selection = editor.model.document.selection;\n            const selectionInGraveyard = selection.getFirstPosition().root.rootName == '$graveyard';\n            const canEditAtSelection = !selectionInGraveyard && editor.model.canEditAt(selection);\n            // Disable if editor is read only, or when selection is in a place which cannot be edited.\n            //\n            // Checking `editor.isReadOnly` is needed for all commands that have `_isEnabledBasedOnSelection == false`.\n            // E.g. undo does not base on selection, but affects data and should be disabled when the editor is in read-only mode.\n            if (editor.isReadOnly || this._isEnabledBasedOnSelection && !canEditAtSelection) {\n                evt.return = false;\n                evt.stop();\n            }\n        }, { priority: 'highest' });\n        this.on('execute', evt => {\n            if (!this.isEnabled) {\n                evt.stop();\n            }\n        }, { priority: 'high' });\n    }\n    /**\n     * A flag indicating whether a command execution changes the editor data or not.\n     *\n     * Commands with `affectsData` set to `false` will not be automatically disabled in\n     * the {@link module:core/editor/editor~Editor#isReadOnly read-only mode} and\n     * {@glink features/read-only#related-features other editor modes} with restricted user write permissions.\n     *\n     * **Note:** You do not have to set it for your every command. It is `true` by default.\n     *\n     * @default true\n     */\n    get affectsData() {\n        return this._affectsData;\n    }\n    set affectsData(affectsData) {\n        this._affectsData = affectsData;\n    }\n    /**\n     * Refreshes the command. The command should update its {@link #isEnabled} and {@link #value} properties\n     * in this method.\n     *\n     * This method is automatically called when\n     * {@link module:engine/model/document~Document#event:change any changes are applied to the document}.\n     */\n    refresh() {\n        this.isEnabled = true;\n    }\n    /**\n     * Disables the command.\n     *\n     * Command may be disabled by multiple features or algorithms (at once). When disabling a command, unique id should be passed\n     * (e.g. the feature name). The same identifier should be used when {@link #clearForceDisabled enabling back} the command.\n     * The command becomes enabled only after all features {@link #clearForceDisabled enabled it back}.\n     *\n     * Disabling and enabling a command:\n     *\n     * ```ts\n     * command.isEnabled; // -> true\n     * command.forceDisabled( 'MyFeature' );\n     * command.isEnabled; // -> false\n     * command.clearForceDisabled( 'MyFeature' );\n     * command.isEnabled; // -> true\n     * ```\n     *\n     * Command disabled by multiple features:\n     *\n     * ```ts\n     * command.forceDisabled( 'MyFeature' );\n     * command.forceDisabled( 'OtherFeature' );\n     * command.clearForceDisabled( 'MyFeature' );\n     * command.isEnabled; // -> false\n     * command.clearForceDisabled( 'OtherFeature' );\n     * command.isEnabled; // -> true\n     * ```\n     *\n     * Multiple disabling with the same identifier is redundant:\n     *\n     * ```ts\n     * command.forceDisabled( 'MyFeature' );\n     * command.forceDisabled( 'MyFeature' );\n     * command.clearForceDisabled( 'MyFeature' );\n     * command.isEnabled; // -> true\n     * ```\n     *\n     * **Note:** some commands or algorithms may have more complex logic when it comes to enabling or disabling certain commands,\n     * so the command might be still disabled after {@link #clearForceDisabled} was used.\n     *\n     * @param id Unique identifier for disabling. Use the same id when {@link #clearForceDisabled enabling back} the command.\n     */\n    forceDisabled(id) {\n        this._disableStack.add(id);\n        if (this._disableStack.size == 1) {\n            this.on('set:isEnabled', forceDisable, { priority: 'highest' });\n            this.isEnabled = false;\n        }\n    }\n    /**\n     * Clears forced disable previously set through {@link #forceDisabled}. See {@link #forceDisabled}.\n     *\n     * @param id Unique identifier, equal to the one passed in {@link #forceDisabled} call.\n     */\n    clearForceDisabled(id) {\n        this._disableStack.delete(id);\n        if (this._disableStack.size == 0) {\n            this.off('set:isEnabled', forceDisable);\n            this.refresh();\n        }\n    }\n    /**\n     * Executes the command.\n     *\n     * A command may accept parameters. They will be passed from {@link module:core/editor/editor~Editor#execute `editor.execute()`}\n     * to the command.\n     *\n     * The `execute()` method will automatically abort when the command is disabled ({@link #isEnabled} is `false`).\n     * This behavior is implemented by a high priority listener to the {@link #event:execute} event.\n     *\n     * In order to see how to disable a command from \"outside\" see the {@link #isEnabled} documentation.\n     *\n     * This method may return a value, which would be forwarded all the way down to the\n     * {@link module:core/editor/editor~Editor#execute `editor.execute()`}.\n     *\n     * @fires execute\n     */\n    execute(...args) { return undefined; } // eslint-disable-line @typescript-eslint/no-unused-vars\n    /**\n     * Destroys the command.\n     */\n    destroy() {\n        this.stopListening();\n    }\n}\n/**\n * Helper function that forces command to be disabled.\n */\nfunction forceDisable(evt) {\n    evt.return = false;\n    evt.stop();\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core/multicommand\n */\nimport Command from './command';\nimport { insertToPriorityArray } from '@ckeditor/ckeditor5-utils';\n/**\n * A CKEditor command that aggregates other commands.\n *\n * This command is used to proxy multiple commands. The multi-command is enabled when\n * at least one of its registered child commands is enabled.\n * When executing a multi-command, the first enabled command with highest priority will be executed.\n *\n * ```ts\n * const multiCommand = new MultiCommand( editor );\n *\n * const commandFoo = new Command( editor );\n * const commandBar = new Command( editor );\n *\n * // Register a child command.\n * multiCommand.registerChildCommand( commandFoo );\n * // Register a child command with a low priority.\n * multiCommand.registerChildCommand( commandBar, { priority: 'low' } );\n *\n * // Enable one of the commands.\n * commandBar.isEnabled = true;\n *\n * multiCommand.execute(); // Will execute commandBar.\n * ```\n */\nexport default class MultiCommand extends Command {\n    constructor() {\n        super(...arguments);\n        /**\n         * Registered child commands definitions.\n         */\n        this._childCommandsDefinitions = [];\n    }\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        // Override base command refresh(): the command's state is changed when one of child commands changes states.\n    }\n    /**\n     * Executes the first enabled command which has the highest priority of all registered child commands.\n     *\n     * @returns The value returned by the {@link module:core/command~Command#execute `command.execute()`}.\n     */\n    execute(...args) {\n        const command = this._getFirstEnabledCommand();\n        return !!command && command.execute(args);\n    }\n    /**\n     * Registers a child command.\n     *\n     * @param options An object with configuration options.\n     * @param options.priority Priority of a command to register.\n     */\n    registerChildCommand(command, options = {}) {\n        insertToPriorityArray(this._childCommandsDefinitions, { command, priority: options.priority || 'normal' });\n        // Change multi-command enabled state when one of registered commands changes state.\n        command.on('change:isEnabled', () => this._checkEnabled());\n        this._checkEnabled();\n    }\n    /**\n     * Checks if any of child commands is enabled.\n     */\n    _checkEnabled() {\n        this.isEnabled = !!this._getFirstEnabledCommand();\n    }\n    /**\n     * Returns a first enabled command with the highest priority or `undefined` if none of them is enabled.\n     */\n    _getFirstEnabledCommand() {\n        const commandDefinition = this._childCommandsDefinitions.find(({ command }) => command.isEnabled);\n        return commandDefinition && commandDefinition.command;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core/plugincollection\n */\nimport { CKEditorError, EmitterMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * Manages a list of CKEditor plugins, including loading, resolving dependencies and initialization.\n */\nexport default class PluginCollection extends EmitterMixin() {\n    /**\n     * Creates an instance of the plugin collection class.\n     * Allows loading and initializing plugins and their dependencies.\n     * Allows providing a list of already loaded plugins. These plugins will not be destroyed along with this collection.\n     *\n     * @param availablePlugins Plugins (constructors) which the collection will be able to use\n     * when {@link module:core/plugincollection~PluginCollection#init} is used with the plugin names (strings, instead of constructors).\n     * Usually, the editor will pass its built-in plugins to the collection so they can later be\n     * used in `config.plugins` or `config.removePlugins` by names.\n     * @param contextPlugins A list of already initialized plugins represented by a `[ PluginConstructor, pluginInstance ]` pair.\n     */\n    constructor(context, availablePlugins = [], contextPlugins = []) {\n        super();\n        this._plugins = new Map();\n        this._context = context;\n        this._availablePlugins = new Map();\n        for (const PluginConstructor of availablePlugins) {\n            if (PluginConstructor.pluginName) {\n                this._availablePlugins.set(PluginConstructor.pluginName, PluginConstructor);\n            }\n        }\n        this._contextPlugins = new Map();\n        for (const [PluginConstructor, pluginInstance] of contextPlugins) {\n            this._contextPlugins.set(PluginConstructor, pluginInstance);\n            this._contextPlugins.set(pluginInstance, PluginConstructor);\n            // To make it possible to require a plugin by its name.\n            if (PluginConstructor.pluginName) {\n                this._availablePlugins.set(PluginConstructor.pluginName, PluginConstructor);\n            }\n        }\n    }\n    /**\n     * Iterable interface.\n     *\n     * Returns `[ PluginConstructor, pluginInstance ]` pairs.\n     */\n    *[Symbol.iterator]() {\n        for (const entry of this._plugins) {\n            if (typeof entry[0] == 'function') {\n                yield entry;\n            }\n        }\n    }\n    /**\n     * Gets the plugin instance by its constructor or name.\n     *\n     * ```ts\n     * // Check if 'Clipboard' plugin was loaded.\n     * if ( editor.plugins.has( 'ClipboardPipeline' ) ) {\n     * \t// Get clipboard plugin instance\n     * \tconst clipboard = editor.plugins.get( 'ClipboardPipeline' );\n     *\n     * \tthis.listenTo( clipboard, 'inputTransformation', ( evt, data ) => {\n     * \t\t// Do something on clipboard input.\n     * \t} );\n     * }\n     * ```\n     *\n     * **Note**: This method will throw an error if a plugin is not loaded. Use `{@link #has editor.plugins.has()}`\n     * to check if a plugin is available.\n     *\n     * @param key The plugin constructor or {@link module:core/plugin~PluginStaticMembers#pluginName name}.\n     */\n    get(key) {\n        const plugin = this._plugins.get(key);\n        if (!plugin) {\n            let pluginName = key;\n            if (typeof key == 'function') {\n                pluginName = key.pluginName || key.name;\n            }\n            /**\n             * The plugin is not loaded and could not be obtained.\n             *\n             * Plugin classes (constructors) need to be provided to the editor and must be loaded before they can be obtained from\n             * the plugin collection.\n             * This is usually done in CKEditor 5 builds by setting the {@link module:core/editor/editor~Editor.builtinPlugins}\n             * property.\n             *\n             * **Note**: You can use `{@link module:core/plugincollection~PluginCollection#has editor.plugins.has()}`\n             * to check if a plugin was loaded.\n             *\n             * @error plugincollection-plugin-not-loaded\n             * @param plugin The name of the plugin which is not loaded.\n             */\n            throw new CKEditorError('plugincollection-plugin-not-loaded', this._context, { plugin: pluginName });\n        }\n        return plugin;\n    }\n    /**\n     * Checks if a plugin is loaded.\n     *\n     * ```ts\n     * // Check if the 'Clipboard' plugin was loaded.\n     * if ( editor.plugins.has( 'ClipboardPipeline' ) ) {\n     * \t// Now use the clipboard plugin instance:\n     * \tconst clipboard = editor.plugins.get( 'ClipboardPipeline' );\n     *\n     * \t// ...\n     * }\n     * ```\n     *\n     * @param key The plugin constructor or {@link module:core/plugin~PluginStaticMembers#pluginName name}.\n     */\n    has(key) {\n        return this._plugins.has(key);\n    }\n    /**\n     * Initializes a set of plugins and adds them to the collection.\n     *\n     * @param plugins An array of {@link module:core/plugin~PluginInterface plugin constructors}\n     * or {@link module:core/plugin~PluginStaticMembers#pluginName plugin names}.\n     * @param pluginsToRemove Names of the plugins or plugin constructors\n     * that should not be loaded (despite being specified in the `plugins` array).\n     * @param pluginsSubstitutions An array of {@link module:core/plugin~PluginInterface plugin constructors}\n     * that will be used to replace plugins of the same names that were passed in `plugins` or that are in their dependency tree.\n     * A useful option for replacing built-in plugins while creating tests (for mocking their APIs). Plugins that will be replaced\n     * must follow these rules:\n     *   * The new plugin must be a class.\n     *   * The new plugin must be named.\n     *   * Both plugins must not depend on other plugins.\n     * @returns A promise which gets resolved once all plugins are loaded and available in the collection.\n     */\n    init(plugins, pluginsToRemove = [], pluginsSubstitutions = []) {\n        // Plugin initialization procedure consists of 2 main steps:\n        // 1) collecting all available plugin constructors,\n        // 2) verification whether all required plugins can be instantiated.\n        //\n        // In the first step, all plugin constructors, available in the provided `plugins` array and inside\n        // plugin's dependencies (from the `Plugin.requires` array), are recursively collected and added to the existing\n        // `this._availablePlugins` map, but without any verification at the given moment. Performing the verification\n        // at this point (during the plugin constructor searching) would cause false errors to occur, that some plugin\n        // is missing but in fact it may be defined further in the array as the dependency of other plugin. After\n        // traversing the entire dependency tree, it will be checked if all required \"top level\" plugins are available.\n        //\n        // In the second step, the list of plugins that have not been explicitly removed is traversed to get all the\n        // plugin constructors to be instantiated in the correct order and to validate against some rules. Finally, if\n        // no plugin is missing and no other error has been found, they all will be instantiated.\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const that = this;\n        const context = this._context;\n        findAvailablePluginConstructors(plugins);\n        validatePlugins(plugins);\n        const pluginsToLoad = plugins.filter(plugin => !isPluginRemoved(plugin, pluginsToRemove));\n        const pluginConstructors = [...getPluginConstructors(pluginsToLoad)];\n        substitutePlugins(pluginConstructors, pluginsSubstitutions);\n        const pluginInstances = loadPlugins(pluginConstructors);\n        return initPlugins(pluginInstances, 'init')\n            .then(() => initPlugins(pluginInstances, 'afterInit'))\n            .then(() => pluginInstances);\n        function isPluginConstructor(plugin) {\n            return typeof plugin === 'function';\n        }\n        function isContextPlugin(plugin) {\n            return isPluginConstructor(plugin) && !!plugin.isContextPlugin;\n        }\n        function isPluginRemoved(plugin, pluginsToRemove) {\n            return pluginsToRemove.some(removedPlugin => {\n                if (removedPlugin === plugin) {\n                    return true;\n                }\n                if (getPluginName(plugin) === removedPlugin) {\n                    return true;\n                }\n                if (getPluginName(removedPlugin) === plugin) {\n                    return true;\n                }\n                return false;\n            });\n        }\n        function getPluginName(plugin) {\n            return isPluginConstructor(plugin) ?\n                plugin.pluginName || plugin.name :\n                plugin;\n        }\n        function findAvailablePluginConstructors(plugins, processed = new Set()) {\n            plugins.forEach(plugin => {\n                if (!isPluginConstructor(plugin)) {\n                    return;\n                }\n                if (processed.has(plugin)) {\n                    return;\n                }\n                processed.add(plugin);\n                if (plugin.pluginName && !that._availablePlugins.has(plugin.pluginName)) {\n                    that._availablePlugins.set(plugin.pluginName, plugin);\n                }\n                if (plugin.requires) {\n                    findAvailablePluginConstructors(plugin.requires, processed);\n                }\n            });\n        }\n        function getPluginConstructors(plugins, processed = new Set()) {\n            return plugins\n                .map(plugin => {\n                return isPluginConstructor(plugin) ?\n                    plugin :\n                    that._availablePlugins.get(plugin);\n            })\n                .reduce((result, plugin) => {\n                if (processed.has(plugin)) {\n                    return result;\n                }\n                processed.add(plugin);\n                if (plugin.requires) {\n                    validatePlugins(plugin.requires, plugin);\n                    getPluginConstructors(plugin.requires, processed).forEach(plugin => result.add(plugin));\n                }\n                return result.add(plugin);\n            }, new Set());\n        }\n        function validatePlugins(plugins, parentPluginConstructor = null) {\n            plugins\n                .map(plugin => {\n                return isPluginConstructor(plugin) ?\n                    plugin :\n                    that._availablePlugins.get(plugin) || plugin;\n            })\n                .forEach(plugin => {\n                checkMissingPlugin(plugin, parentPluginConstructor);\n                checkContextPlugin(plugin, parentPluginConstructor);\n                checkRemovedPlugin(plugin, parentPluginConstructor);\n            });\n        }\n        function checkMissingPlugin(plugin, parentPluginConstructor) {\n            if (isPluginConstructor(plugin)) {\n                return;\n            }\n            if (parentPluginConstructor) {\n                /**\n                 * A required \"soft\" dependency was not found on the plugin list.\n                 *\n                 * When configuring the editor, either prior to building (via\n                 * {@link module:core/editor/editor~Editor.builtinPlugins `Editor.builtinPlugins`}) or when\n                 * creating a new instance of the editor (e.g. via\n                 * {@link module:core/editor/editorconfig~EditorConfig#plugins `config.plugins`}), you need to provide\n                 * some of the dependencies for other plugins that you used.\n                 *\n                 * This error is thrown when one of these dependencies was not provided. The name of the missing plugin\n                 * can be found in `missingPlugin` and the plugin that required it in `requiredBy`.\n                 *\n                 * In order to resolve it, you need to import the missing plugin and add it to the\n                 * current list of plugins (`Editor.builtinPlugins` or `config.plugins`/`config.extraPlugins`).\n                 *\n                 * Soft requirements were introduced in version 26.0.0. If you happen to stumble upon this error\n                 * when upgrading to version 26.0.0, read also the\n                 * {@glink updating/guides/update-to-26 Migration to 26.0.0} guide.\n                 *\n                 * @error plugincollection-soft-required\n                 * @param missingPlugin The name of the required plugin.\n                 * @param requiredBy The name of the plugin that requires the other plugin.\n                 */\n                throw new CKEditorError('plugincollection-soft-required', context, { missingPlugin: plugin, requiredBy: getPluginName(parentPluginConstructor) });\n            }\n            /**\n             * A plugin is not available and could not be loaded.\n             *\n             * Plugin classes (constructors) need to be provided to the editor before they can be loaded by name.\n             * This is usually done in CKEditor 5 builds by setting the {@link module:core/editor/editor~Editor.builtinPlugins}\n             * property.\n             *\n             * **If you see this warning when using one of the {@glink installation/getting-started/predefined-builds\n             * CKEditor 5 Builds}**,\n             * it means that you try to enable a plugin which was not included in that build. This may be due to a typo\n             * in the plugin name or simply because that plugin is not a part of this build. In the latter scenario,\n             * read more about {@glink installation/getting-started/quick-start custom builds}.\n             *\n             * **If you see this warning when using one of the editor creators directly** (not a build), then it means\n             * that you tried loading plugins by name. However, unlike CKEditor 4, CKEditor 5 does not implement a \"plugin loader\".\n             * This means that CKEditor 5 does not know where to load the plugin modules from. Therefore, you need to\n             * provide each plugin through a reference (as a constructor function). Check out the examples in\n             * {@glink installation/advanced/alternative-setups/integrating-from-source-webpack \"Building from source\"}.\n             *\n             * @error plugincollection-plugin-not-found\n             * @param plugin The name of the plugin which could not be loaded.\n             */\n            throw new CKEditorError('plugincollection-plugin-not-found', context, { plugin });\n        }\n        function checkContextPlugin(plugin, parentPluginConstructor) {\n            if (!isContextPlugin(parentPluginConstructor)) {\n                return;\n            }\n            if (isContextPlugin(plugin)) {\n                return;\n            }\n            /**\n             * If a plugin is a context plugin, all plugins it requires should also be context plugins\n             * instead of plugins. In other words, if one plugin can be used in the context,\n             * all its requirements should also be ready to be used in the context. Note that the context\n             * provides only a part of the API provided by the editor. If one plugin needs a full\n             * editor API, all plugins which require it are considered as plugins that need a full\n             * editor API.\n             *\n             * @error plugincollection-context-required\n             * @param plugin The name of the required plugin.\n             * @param requiredBy The name of the parent plugin.\n             */\n            throw new CKEditorError('plugincollection-context-required', context, { plugin: getPluginName(plugin), requiredBy: getPluginName(parentPluginConstructor) });\n        }\n        function checkRemovedPlugin(plugin, parentPluginConstructor) {\n            if (!parentPluginConstructor) {\n                return;\n            }\n            if (!isPluginRemoved(plugin, pluginsToRemove)) {\n                return;\n            }\n            /**\n             * Cannot load a plugin because one of its dependencies is listed in the `removePlugins` option.\n             *\n             * @error plugincollection-required\n             * @param plugin The name of the required plugin.\n             * @param requiredBy The name of the parent plugin.\n             */\n            throw new CKEditorError('plugincollection-required', context, { plugin: getPluginName(plugin), requiredBy: getPluginName(parentPluginConstructor) });\n        }\n        function loadPlugins(pluginConstructors) {\n            return pluginConstructors.map(PluginConstructor => {\n                let pluginInstance = that._contextPlugins.get(PluginConstructor);\n                pluginInstance = pluginInstance || new PluginConstructor(context);\n                that._add(PluginConstructor, pluginInstance);\n                return pluginInstance;\n            });\n        }\n        function initPlugins(pluginInstances, method) {\n            return pluginInstances.reduce((promise, plugin) => {\n                if (!plugin[method]) {\n                    return promise;\n                }\n                if (that._contextPlugins.has(plugin)) {\n                    return promise;\n                }\n                return promise.then(plugin[method].bind(plugin));\n            }, Promise.resolve());\n        }\n        /**\n         * Replaces plugin constructors with the specified set of plugins.\n         */\n        function substitutePlugins(pluginConstructors, pluginsSubstitutions) {\n            for (const pluginItem of pluginsSubstitutions) {\n                if (typeof pluginItem != 'function') {\n                    /**\n                     * The plugin replacing an existing plugin must be a function.\n                     *\n                     * @error plugincollection-replace-plugin-invalid-type\n                     */\n                    throw new CKEditorError('plugincollection-replace-plugin-invalid-type', null, { pluginItem });\n                }\n                const pluginName = pluginItem.pluginName;\n                if (!pluginName) {\n                    /**\n                     * The plugin replacing an existing plugin must have a name.\n                     *\n                     * @error plugincollection-replace-plugin-missing-name\n                     */\n                    throw new CKEditorError('plugincollection-replace-plugin-missing-name', null, { pluginItem });\n                }\n                if (pluginItem.requires && pluginItem.requires.length) {\n                    /**\n                     * The plugin replacing an existing plugin cannot depend on other plugins.\n                     *\n                     * @error plugincollection-plugin-for-replacing-cannot-have-dependencies\n                     */\n                    throw new CKEditorError('plugincollection-plugin-for-replacing-cannot-have-dependencies', null, { pluginName });\n                }\n                const pluginToReplace = that._availablePlugins.get(pluginName);\n                if (!pluginToReplace) {\n                    /**\n                     * The replaced plugin does not exist in the\n                     * {@link module:core/plugincollection~PluginCollection available plugins} collection.\n                     *\n                     * @error plugincollection-plugin-for-replacing-not-exist\n                     */\n                    throw new CKEditorError('plugincollection-plugin-for-replacing-not-exist', null, { pluginName });\n                }\n                const indexInPluginConstructors = pluginConstructors.indexOf(pluginToReplace);\n                if (indexInPluginConstructors === -1) {\n                    // The Context feature can substitute plugins as well.\n                    // It may happen that the editor will be created with the given context, where the plugin for substitute\n                    // was already replaced. In such a case, we don't want to do it again.\n                    if (that._contextPlugins.has(pluginToReplace)) {\n                        return;\n                    }\n                    /**\n                     * The replaced plugin will not be loaded so it cannot be replaced.\n                     *\n                     * @error plugincollection-plugin-for-replacing-not-loaded\n                     */\n                    throw new CKEditorError('plugincollection-plugin-for-replacing-not-loaded', null, { pluginName });\n                }\n                if (pluginToReplace.requires && pluginToReplace.requires.length) {\n                    /**\n                     * The replaced plugin cannot depend on other plugins.\n                     *\n                     * @error plugincollection-replaced-plugin-cannot-have-dependencies\n                     */\n                    throw new CKEditorError('plugincollection-replaced-plugin-cannot-have-dependencies', null, { pluginName });\n                }\n                pluginConstructors.splice(indexInPluginConstructors, 1, pluginItem);\n                that._availablePlugins.set(pluginName, pluginItem);\n            }\n        }\n    }\n    /**\n     * Destroys all loaded plugins.\n     */\n    destroy() {\n        const promises = [];\n        for (const [, pluginInstance] of this) {\n            if (typeof pluginInstance.destroy == 'function' && !this._contextPlugins.has(pluginInstance)) {\n                promises.push(pluginInstance.destroy());\n            }\n        }\n        return Promise.all(promises);\n    }\n    /**\n     * Adds the plugin to the collection. Exposed mainly for testing purposes.\n     *\n     * @param PluginConstructor The plugin constructor.\n     * @param plugin The instance of the plugin.\n     */\n    _add(PluginConstructor, plugin) {\n        this._plugins.set(PluginConstructor, plugin);\n        const pluginName = PluginConstructor.pluginName;\n        if (!pluginName) {\n            return;\n        }\n        if (this._plugins.has(pluginName)) {\n            /**\n             * Two plugins with the same {@link module:core/plugin~PluginStaticMembers#pluginName} were loaded.\n             * This will lead to runtime conflicts between these plugins.\n             *\n             * In practice, this warning usually means that new plugins were added to an existing CKEditor 5 build.\n             * Plugins should always be added to a source version of the editor (`@ckeditor/ckeditor5-editor-*`),\n             * not to an editor imported from one of the `@ckeditor/ckeditor5-build-*` packages.\n             *\n             * Check your import paths and the list of plugins passed to\n             * {@link module:core/editor/editor~Editor.create `Editor.create()`}\n             * or specified in {@link module:core/editor/editor~Editor.builtinPlugins `Editor.builtinPlugins`}.\n             *\n             * The second option is that your `node_modules/` directory contains duplicated versions of the same\n             * CKEditor 5 packages. Normally, on clean installations, npm deduplicates packages in `node_modules/`, so\n             * it may be enough to call `rm -rf node_modules && npm i`. However, if you installed conflicting versions\n             * of some packages, their dependencies may need to be installed in more than one version which may lead to this\n             * warning.\n             *\n             * Technically speaking, this error occurs because after adding a plugin to an existing editor build\n             * the dependencies of this plugin are being duplicated.\n             * They are already built into that editor build and now get added for the second time as dependencies\n             * of the plugin you are installing.\n             *\n             * Read more about {@glink installation/plugins/installing-plugins Installing plugins}.\n             *\n             * @error plugincollection-plugin-name-conflict\n             * @param pluginName The duplicated plugin name.\n             * @param plugin1 The first plugin constructor.\n             * @param plugin2 The second plugin constructor.\n             */\n            throw new CKEditorError('plugincollection-plugin-name-conflict', null, { pluginName, plugin1: this._plugins.get(pluginName).constructor, plugin2: PluginConstructor });\n        }\n        this._plugins.set(pluginName, plugin);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core/context\n */\nimport { Config, Collection, CKEditorError, Locale } from '@ckeditor/ckeditor5-utils';\nimport PluginCollection from './plugincollection';\n/**\n * Provides a common, higher-level environment for solutions that use multiple {@link module:core/editor/editor~Editor editors}\n * or plugins that work outside the editor. Use it instead of {@link module:core/editor/editor~Editor.create `Editor.create()`}\n * in advanced application integrations.\n *\n * All configuration options passed to a context will be used as default options for the editor instances initialized in that context.\n *\n * {@link module:core/contextplugin~ContextPlugin Context plugins} passed to a context instance will be shared among all\n * editor instances initialized in this context. These will be the same plugin instances for all the editors.\n *\n * **Note:** The context can only be initialized with {@link module:core/contextplugin~ContextPlugin context plugins}\n * (e.g. [comments](https://ckeditor.com/collaboration/comments/)). Regular {@link module:core/plugin~Plugin plugins} require an\n * editor instance to work and cannot be added to a context.\n *\n * **Note:** You can add a context plugin to an editor instance, though.\n *\n * If you are using multiple editor instances on one page and use any context plugins, create a context to share the configuration and\n * plugins among these editors. Some plugins will use the information about all existing editors to better integrate between them.\n *\n * If you are using plugins that do not require an editor to work (e.g. [comments](https://ckeditor.com/collaboration/comments/)),\n * enable and configure them using the context.\n *\n * If you are using only a single editor on each page, use {@link module:core/editor/editor~Editor.create `Editor.create()`} instead.\n * In such a case, a context instance will be created by the editor instance in a transparent way.\n *\n * See {@link ~Context.create `Context.create()`} for usage examples.\n */\nexport default class Context {\n    /**\n     * Creates a context instance with a given configuration.\n     *\n     * Usually not to be used directly. See the static {@link module:core/context~Context.create `create()`} method.\n     *\n     * @param config The context configuration.\n     */\n    constructor(config) {\n        /**\n         * Reference to the editor which created the context.\n         * Null when the context was created outside of the editor.\n         *\n         * It is used to destroy the context when removing the editor that has created the context.\n         */\n        this._contextOwner = null;\n        this.config = new Config(config, this.constructor.defaultConfig);\n        const availablePlugins = this.constructor.builtinPlugins;\n        this.config.define('plugins', availablePlugins);\n        this.plugins = new PluginCollection(this, availablePlugins);\n        const languageConfig = this.config.get('language') || {};\n        this.locale = new Locale({\n            uiLanguage: typeof languageConfig === 'string' ? languageConfig : languageConfig.ui,\n            contentLanguage: this.config.get('language.content')\n        });\n        this.t = this.locale.t;\n        this.editors = new Collection();\n    }\n    /**\n     * Loads and initializes plugins specified in the configuration.\n     *\n     * @returns A promise which resolves once the initialization is completed, providing an array of loaded plugins.\n     */\n    initPlugins() {\n        const plugins = this.config.get('plugins') || [];\n        const substitutePlugins = this.config.get('substitutePlugins') || [];\n        // Plugins for substitution should be checked as well.\n        for (const Plugin of plugins.concat(substitutePlugins)) {\n            if (typeof Plugin != 'function') {\n                /**\n                 * Only a constructor function is allowed as a {@link module:core/contextplugin~ContextPlugin context plugin}.\n                 *\n                 * @error context-initplugins-constructor-only\n                 */\n                throw new CKEditorError('context-initplugins-constructor-only', null, { Plugin });\n            }\n            if (Plugin.isContextPlugin !== true) {\n                /**\n                 * Only a plugin marked as a {@link module:core/contextplugin~ContextPlugin.isContextPlugin context plugin}\n                 * is allowed to be used with a context.\n                 *\n                 * @error context-initplugins-invalid-plugin\n                 */\n                throw new CKEditorError('context-initplugins-invalid-plugin', null, { Plugin });\n            }\n        }\n        return this.plugins.init(plugins, [], substitutePlugins);\n    }\n    /**\n     * Destroys the context instance and all editors used with the context,\n     * releasing all resources used by the context.\n     *\n     * @returns A promise that resolves once the context instance is fully destroyed.\n     */\n    destroy() {\n        return Promise.all(Array.from(this.editors, editor => editor.destroy()))\n            .then(() => this.plugins.destroy());\n    }\n    /**\n     * Adds a reference to the editor which is used with this context.\n     *\n     * When the given editor has created the context, the reference to this editor will be stored\n     * as a {@link ~Context#_contextOwner}.\n     *\n     * This method should only be used by the editor.\n     *\n     * @internal\n     * @param isContextOwner Stores the given editor as a context owner.\n     */\n    _addEditor(editor, isContextOwner) {\n        if (this._contextOwner) {\n            /**\n             * Cannot add multiple editors to the context which is created by the editor.\n             *\n             * @error context-addeditor-private-context\n             */\n            throw new CKEditorError('context-addeditor-private-context');\n        }\n        this.editors.add(editor);\n        if (isContextOwner) {\n            this._contextOwner = editor;\n        }\n    }\n    /**\n     * Removes a reference to the editor which was used with this context.\n     * When the context was created by the given editor, the context will be destroyed.\n     *\n     * This method should only be used by the editor.\n     *\n     * @internal\n     * @return A promise that resolves once the editor is removed from the context or when the context was destroyed.\n     */\n    _removeEditor(editor) {\n        if (this.editors.has(editor)) {\n            this.editors.remove(editor);\n        }\n        if (this._contextOwner === editor) {\n            return this.destroy();\n        }\n        return Promise.resolve();\n    }\n    /**\n     * Returns the context configuration which will be copied to the editors created using this context.\n     *\n     * The configuration returned by this method has the plugins configuration removed &mdash; plugins are shared with all editors\n     * through another mechanism.\n     *\n     * This method should only be used by the editor.\n     *\n     * @internal\n     * @returns Configuration as a plain object.\n     */\n    _getEditorConfig() {\n        const result = {};\n        for (const name of this.config.names()) {\n            if (!['plugins', 'removePlugins', 'extraPlugins'].includes(name)) {\n                result[name] = this.config.get(name);\n            }\n        }\n        return result;\n    }\n    /**\n     * Creates and initializes a new context instance.\n     *\n     * ```ts\n     * const commonConfig = { ... }; // Configuration for all the plugins and editors.\n     * const editorPlugins = [ ... ]; // Regular plugins here.\n     *\n     * Context\n     * \t.create( {\n     * \t\t// Only context plugins here.\n     * \t\tplugins: [ ... ],\n     *\n     * \t\t// Configure the language for all the editors (it cannot be overwritten).\n     * \t\tlanguage: { ... },\n     *\n     * \t\t// Configuration for context plugins.\n     * \t\tcomments: { ... },\n     * \t\t...\n     *\n     * \t\t// Default configuration for editor plugins.\n     * \t\ttoolbar: { ... },\n     * \t\timage: { ... },\n     * \t\t...\n     * \t} )\n     * \t.then( context => {\n     * \t\tconst promises = [];\n     *\n     * \t\tpromises.push( ClassicEditor.create(\n     * \t\t\tdocument.getElementById( 'editor1' ),\n     * \t\t\t{\n     * \t\t\t\teditorPlugins,\n     * \t\t\t\tcontext\n     * \t\t\t}\n     * \t\t) );\n     *\n     * \t\tpromises.push( ClassicEditor.create(\n     * \t\t\tdocument.getElementById( 'editor2' ),\n     * \t\t\t{\n     * \t\t\t\teditorPlugins,\n     * \t\t\t\tcontext,\n     * \t\t\t\ttoolbar: { ... } // You can overwrite the configuration of the context.\n     * \t\t\t}\n     * \t\t) );\n     *\n     * \t\treturn Promise.all( promises );\n     * \t} );\n     * ```\n     *\n     * @param config The context configuration.\n     * @returns A promise resolved once the context is ready. The promise resolves with the created context instance.\n     */\n    static create(config) {\n        return new Promise(resolve => {\n            const context = new this(config);\n            resolve(context.initPlugins().then(() => context));\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core/contextplugin\n */\nimport { ObservableMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * The base class for {@link module:core/context~Context} plugin classes.\n *\n * A context plugin can either be initialized for an {@link module:core/editor/editor~Editor editor} or for\n * a {@link module:core/context~Context context}. In other words, it can either\n * work within one editor instance or with one or more editor instances that use a single context.\n * It is the context plugin's role to implement handling for both modes.\n *\n * There are a few rules for interaction between the editor plugins and context plugins:\n *\n * * A context plugin can require another context plugin.\n * * An {@link module:core/plugin~Plugin editor plugin} can require a context plugin.\n * * A context plugin MUST NOT require an {@link module:core/plugin~Plugin editor plugin}.\n */\nexport default class ContextPlugin extends ObservableMixin() {\n    /**\n     * Creates a new plugin instance.\n     */\n    constructor(context) {\n        super();\n        this.context = context;\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        this.stopListening();\n    }\n    /**\n     * @inheritDoc\n     */\n    static get isContextPlugin() {\n        return true;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core/commandcollection\n */\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * Collection of commands. Its instance is available in {@link module:core/editor/editor~Editor#commands `editor.commands`}.\n */\nexport default class CommandCollection {\n    /**\n     * Creates collection instance.\n     */\n    constructor() {\n        this._commands = new Map();\n    }\n    /**\n     * Registers a new command.\n     *\n     * @param commandName The name of the command.\n     */\n    add(commandName, command) {\n        this._commands.set(commandName, command);\n    }\n    /**\n     * Retrieves a command from the collection.\n     *\n     * @param commandName The name of the command.\n     */\n    get(commandName) {\n        return this._commands.get(commandName);\n    }\n    /**\n     * Executes a command.\n     *\n     * @param commandName The name of the command.\n     * @param commandParams Command parameters.\n     * @returns The value returned by the {@link module:core/command~Command#execute `command.execute()`}.\n     */\n    execute(commandName, ...commandParams) {\n        const command = this.get(commandName);\n        if (!command) {\n            /**\n             * Command does not exist.\n             *\n             * @error commandcollection-command-not-found\n             * @param commandName Name of the command.\n             */\n            throw new CKEditorError('commandcollection-command-not-found', this, { commandName });\n        }\n        return command.execute(...commandParams);\n    }\n    /**\n     * Returns iterator of command names.\n     */\n    *names() {\n        yield* this._commands.keys();\n    }\n    /**\n     * Returns iterator of command instances.\n     */\n    *commands() {\n        yield* this._commands.values();\n    }\n    /**\n     * Iterable interface.\n     *\n     * Returns `[ commandName, commandInstance ]` pairs.\n     */\n    [Symbol.iterator]() {\n        return this._commands[Symbol.iterator]();\n    }\n    /**\n     * Destroys all collection commands.\n     */\n    destroy() {\n        for (const command of this.commands()) {\n            command.destroy();\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core/editingkeystrokehandler\n */\nimport { KeystrokeHandler } from '@ckeditor/ckeditor5-utils';\n/**\n * A keystroke handler for editor editing. Its instance is available\n * in {@link module:core/editor/editor~Editor#keystrokes} so plugins\n * can register their keystrokes.\n *\n * E.g. an undo plugin would do this:\n *\n * ```ts\n * editor.keystrokes.set( 'Ctrl+Z', 'undo' );\n * editor.keystrokes.set( 'Ctrl+Shift+Z', 'redo' );\n * editor.keystrokes.set( 'Ctrl+Y', 'redo' );\n * ```\n */\nexport default class EditingKeystrokeHandler extends KeystrokeHandler {\n    /**\n     * Creates an instance of the keystroke handler.\n     */\n    constructor(editor) {\n        super();\n        this.editor = editor;\n    }\n    /**\n     * Registers a handler for the specified keystroke.\n     *\n     * The handler can be specified as a command name or a callback.\n     *\n     * @param keystroke Keystroke defined in a format accepted by\n     * the {@link module:utils/keyboard~parseKeystroke} function.\n     * @param callback If a string is passed, then the keystroke will\n     * {@link module:core/editor/editor~Editor#execute execute a command}.\n     * If a function, then it will be called with the\n     * {@link module:engine/view/observer/keyobserver~KeyEventData key event data} object and\n     * a `cancel()` helper to both `preventDefault()` and `stopPropagation()` of the event.\n     * @param options Additional options.\n     * @param options.priority The priority of the keystroke callback. The higher the priority value\n     * the sooner the callback will be executed. Keystrokes having the same priority\n     * are called in the order they were added.\n     */\n    set(keystroke, callback, options = {}) {\n        if (typeof callback == 'string') {\n            const commandName = callback;\n            callback = (evtData, cancel) => {\n                this.editor.execute(commandName);\n                cancel();\n            };\n        }\n        super.set(keystroke, callback, options);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core/editor/editor\n */\nimport { Config, CKEditorError, ObservableMixin } from '@ckeditor/ckeditor5-utils';\nimport { Conversion, DataController, EditingController, Model, StylesProcessor } from '@ckeditor/ckeditor5-engine';\nimport Context from '../context';\nimport PluginCollection from '../plugincollection';\nimport CommandCollection from '../commandcollection';\nimport EditingKeystrokeHandler from '../editingkeystrokehandler';\n/**\n * The class representing a basic, generic editor.\n *\n * Check out the list of its subclasses to learn about specific editor implementations.\n *\n * All editor implementations (like {@link module:editor-classic/classiceditor~ClassicEditor} or\n * {@link module:editor-inline/inlineeditor~InlineEditor}) should extend this class. They can add their\n * own methods and properties.\n *\n * When you are implementing a plugin, this editor represents the API\n * which your plugin can expect to get when using its {@link module:core/plugin~Plugin#editor} property.\n *\n * This API should be sufficient in order to implement the \"editing\" part of your feature\n * (schema definition, conversion, commands, keystrokes, etc.).\n * It does not define the editor UI, which is available only if\n * the specific editor implements also the {@link ~Editor#ui} property\n * (as most editor implementations do).\n */\nexport default class Editor extends ObservableMixin() {\n    /**\n     * Creates a new instance of the editor class.\n     *\n     * Usually, not to be used directly. See the static {@link module:core/editor/editor~Editor.create `create()`} method.\n     *\n     * @param config The editor configuration.\n     */\n    constructor(config = {}) {\n        super();\n        const constructor = this.constructor;\n        // Prefer the language passed as the argument to the constructor instead of the constructor's `defaultConfig`, if both are set.\n        const language = config.language || (constructor.defaultConfig && constructor.defaultConfig.language);\n        this._context = config.context || new Context({ language });\n        this._context._addEditor(this, !config.context);\n        // Clone the plugins to make sure that the plugin array will not be shared\n        // between editors and make the watchdog feature work correctly.\n        const availablePlugins = Array.from(constructor.builtinPlugins || []);\n        this.config = new Config(config, constructor.defaultConfig);\n        this.config.define('plugins', availablePlugins);\n        this.config.define(this._context._getEditorConfig());\n        this.plugins = new PluginCollection(this, availablePlugins, this._context.plugins);\n        this.locale = this._context.locale;\n        this.t = this.locale.t;\n        this._readOnlyLocks = new Set();\n        this.commands = new CommandCollection();\n        this.set('state', 'initializing');\n        this.once('ready', () => (this.state = 'ready'), { priority: 'high' });\n        this.once('destroy', () => (this.state = 'destroyed'), { priority: 'high' });\n        this.model = new Model();\n        this.on('change:isReadOnly', () => {\n            this.model.document.isReadOnly = this.isReadOnly;\n        });\n        const stylesProcessor = new StylesProcessor();\n        this.data = new DataController(this.model, stylesProcessor);\n        this.editing = new EditingController(this.model, stylesProcessor);\n        this.editing.view.document.bind('isReadOnly').to(this);\n        this.conversion = new Conversion([this.editing.downcastDispatcher, this.data.downcastDispatcher], this.data.upcastDispatcher);\n        this.conversion.addAlias('dataDowncast', this.data.downcastDispatcher);\n        this.conversion.addAlias('editingDowncast', this.editing.downcastDispatcher);\n        this.keystrokes = new EditingKeystrokeHandler(this);\n        this.keystrokes.listenTo(this.editing.view.document);\n    }\n    /**\n     * Defines whether the editor is in the read-only mode.\n     *\n     * In read-only mode the editor {@link #commands commands} are disabled so it is not possible\n     * to modify the document by using them. Also, the editable element(s) become non-editable.\n     *\n     * In order to make the editor read-only, you need to call the {@link #enableReadOnlyMode} method:\n     *\n     * ```ts\n     * editor.enableReadOnlyMode( 'feature-id' );\n     * ```\n     *\n     * Later, to turn off the read-only mode, call {@link #disableReadOnlyMode}:\n     *\n     * ```ts\n     * editor.disableReadOnlyMode( 'feature-id' );\n     * ```\n     *\n     * @readonly\n     * @observable\n     */\n    get isReadOnly() {\n        return this._readOnlyLocks.size > 0;\n    }\n    set isReadOnly(value) {\n        /**\n         * The {@link module:core/editor/editor~Editor#isReadOnly Editor#isReadOnly} property is read-only since version `34.0.0`\n         * and can be set only using {@link module:core/editor/editor~Editor#enableReadOnlyMode `Editor#enableReadOnlyMode( lockId )`} and\n         * {@link module:core/editor/editor~Editor#disableReadOnlyMode `Editor#disableReadOnlyMode( lockId )`}.\n         *\n         * Usage before version `34.0.0`:\n         *\n         * ```ts\n         * editor.isReadOnly = true;\n         * editor.isReadOnly = false;\n         * ```\n         *\n         * Usage since version `34.0.0`:\n         *\n         * ```ts\n         * editor.enableReadOnlyMode( 'my-feature-id' );\n         * editor.disableReadOnlyMode( 'my-feature-id' );\n         * ```\n         *\n         * @error editor-isreadonly-has-no-setter\n         */\n        throw new CKEditorError('editor-isreadonly-has-no-setter');\n    }\n    /**\n     * Turns on the read-only mode in the editor.\n     *\n     * Editor can be switched to or out of the read-only mode by many features, under various circumstances. The editor supports locking\n     * mechanism for the read-only mode. It enables easy control over the read-only mode when many features wants to turn it on or off at\n     * the same time, without conflicting with each other. It guarantees that you will not make the editor editable accidentally (which\n     * could lead to errors).\n     *\n     * Each read-only mode request is identified by a unique id (also called \"lock\"). If multiple plugins requested to turn on the\n     * read-only mode, then, the editor will become editable only after all these plugins turn the read-only mode off (using the same ids).\n     *\n     * Note, that you cannot force the editor to disable the read-only mode if other plugins set it.\n     *\n     * After the first `enableReadOnlyMode()` call, the {@link #isReadOnly `isReadOnly` property} will be set to `true`:\n     *\n     * ```ts\n     * editor.isReadOnly; // `false`.\n     * editor.enableReadOnlyMode( 'my-feature-id' );\n     * editor.isReadOnly; // `true`.\n     * ```\n     *\n     * You can turn off the read-only mode (\"clear the lock\") using the {@link #disableReadOnlyMode `disableReadOnlyMode()`} method:\n     *\n     * ```ts\n     * editor.enableReadOnlyMode( 'my-feature-id' );\n     * // ...\n     * editor.disableReadOnlyMode( 'my-feature-id' );\n     * editor.isReadOnly; // `false`.\n     * ```\n     *\n     * All \"locks\" need to be removed to enable editing:\n     *\n     * ```ts\n     * editor.enableReadOnlyMode( 'my-feature-id' );\n     * editor.enableReadOnlyMode( 'my-other-feature-id' );\n     * // ...\n     * editor.disableReadOnlyMode( 'my-feature-id' );\n     * editor.isReadOnly; // `true`.\n     * editor.disableReadOnlyMode( 'my-other-feature-id' );\n     * editor.isReadOnly; // `false`.\n     * ```\n     *\n     * @param lockId A unique ID for setting the editor to the read-only state.\n     */\n    enableReadOnlyMode(lockId) {\n        if (typeof lockId !== 'string' && typeof lockId !== 'symbol') {\n            /**\n             * The lock ID is missing or it is not a string or symbol.\n             *\n             * @error editor-read-only-lock-id-invalid\n             */\n            throw new CKEditorError('editor-read-only-lock-id-invalid', null, { lockId });\n        }\n        if (this._readOnlyLocks.has(lockId)) {\n            return;\n        }\n        this._readOnlyLocks.add(lockId);\n        if (this._readOnlyLocks.size === 1) {\n            // Manually fire the `change:isReadOnly` event as only getter is provided.\n            this.fire('change:isReadOnly', 'isReadOnly', true, false);\n        }\n    }\n    /**\n     * Removes the read-only lock from the editor with given lock ID.\n     *\n     * When no lock is present on the editor anymore, then the {@link #isReadOnly `isReadOnly` property} will be set to `false`.\n     *\n     * @param lockId The lock ID for setting the editor to the read-only state.\n     */\n    disableReadOnlyMode(lockId) {\n        if (typeof lockId !== 'string' && typeof lockId !== 'symbol') {\n            throw new CKEditorError('editor-read-only-lock-id-invalid', null, { lockId });\n        }\n        if (!this._readOnlyLocks.has(lockId)) {\n            return;\n        }\n        this._readOnlyLocks.delete(lockId);\n        if (this._readOnlyLocks.size === 0) {\n            // Manually fire the `change:isReadOnly` event as only getter is provided.\n            this.fire('change:isReadOnly', 'isReadOnly', false, true);\n        }\n    }\n    /**\n     * Loads and initializes plugins specified in the configuration.\n     *\n     * @returns A promise which resolves once the initialization is completed, providing an array of loaded plugins.\n     */\n    initPlugins() {\n        const config = this.config;\n        const plugins = config.get('plugins');\n        const removePlugins = config.get('removePlugins') || [];\n        const extraPlugins = config.get('extraPlugins') || [];\n        const substitutePlugins = config.get('substitutePlugins') || [];\n        return this.plugins.init(plugins.concat(extraPlugins), removePlugins, substitutePlugins);\n    }\n    /**\n     * Destroys the editor instance, releasing all resources used by it.\n     *\n     * **Note** The editor cannot be destroyed during the initialization phase so if it is called\n     * while the editor {@link #state is being initialized}, it will wait for the editor initialization before destroying it.\n     *\n     * @fires destroy\n     * @returns A promise that resolves once the editor instance is fully destroyed.\n     */\n    destroy() {\n        let readyPromise = Promise.resolve();\n        if (this.state == 'initializing') {\n            readyPromise = new Promise(resolve => this.once('ready', resolve));\n        }\n        return readyPromise\n            .then(() => {\n            this.fire('destroy');\n            this.stopListening();\n            this.commands.destroy();\n        })\n            .then(() => this.plugins.destroy())\n            .then(() => {\n            this.model.destroy();\n            this.data.destroy();\n            this.editing.destroy();\n            this.keystrokes.destroy();\n        })\n            // Remove the editor from the context.\n            // When the context was created by this editor, the context will be destroyed.\n            .then(() => this._context._removeEditor(this));\n    }\n    /**\n     * Executes the specified command with given parameters.\n     *\n     * Shorthand for:\n     *\n     * ```ts\n     * editor.commands.get( commandName ).execute( ... );\n     * ```\n     *\n     * @param commandName The name of the command to execute.\n     * @param commandParams Command parameters.\n     * @returns The value returned by the {@link module:core/commandcollection~CommandCollection#execute `commands.execute()`}.\n     */\n    execute(commandName, ...commandParams) {\n        try {\n            return this.commands.execute(commandName, ...commandParams);\n        }\n        catch (err) {\n            // @if CK_DEBUG // throw err;\n            /* istanbul ignore next -- @preserve */\n            CKEditorError.rethrowUnexpectedError(err, this);\n        }\n    }\n    /**\n     * Focuses the editor.\n     *\n     * **Note** To explicitly focus the editing area of the editor, use the\n     * {@link module:engine/view/view~View#focus `editor.editing.view.focus()`} method of the editing view.\n     *\n     * Check out the {@glink framework/deep-dive/ui/focus-tracking#focus-in-the-editor-ui Focus in the editor UI} section\n     * of the {@glink framework/deep-dive/ui/focus-tracking Deep dive into focus tracking} guide to learn more.\n     */\n    focus() {\n        this.editing.view.focus();\n    }\n    /* istanbul ignore next -- @preserve */\n    /**\n     * Creates and initializes a new editor instance.\n     *\n     * This is an abstract method. Every editor type needs to implement its own initialization logic.\n     *\n     * See the `create()` methods of the existing editor types to learn how to use them:\n     *\n     * * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`}\n     * * {@link module:editor-balloon/ballooneditor~BalloonEditor.create `BalloonEditor.create()`}\n     * * {@link module:editor-decoupled/decouplededitor~DecoupledEditor.create `DecoupledEditor.create()`}\n     * * {@link module:editor-inline/inlineeditor~InlineEditor.create `InlineEditor.create()`}\n     */\n    static create(...args) {\n        throw new Error('This is an abstract method.');\n    }\n}\n/**\n * This error is thrown when trying to pass a `<textarea>` element to a `create()` function of an editor class.\n *\n * The only editor type which can be initialized on `<textarea>` elements is\n * the {@glink installation/getting-started/predefined-builds#classic-editor classic editor}.\n * This editor hides the passed element and inserts its own UI next to it. Other types of editors reuse the passed element as their root\n * editable element and therefore `<textarea>` is not appropriate for them. Use a `<div>` or another text container instead:\n *\n * ```html\n * <div id=\"editor\">\n * \t<p>Initial content.</p>\n * </div>\n * ```\n *\n * @error editor-wrong-element\n */\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core/editor/utils/attachtoform\n */\nimport { isFunction } from 'lodash-es';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * Checks if the editor is initialized on a `<textarea>` element that belongs to a form. If yes, it updates the editor's element\n * content before submitting the form.\n *\n * This helper requires the {@link module:core/editor/utils/elementapimixin~ElementApi ElementApi interface}.\n *\n * @param editor Editor instance.\n */\nexport default function attachToForm(editor) {\n    if (!isFunction(editor.updateSourceElement)) {\n        /**\n         * The editor passed to `attachToForm()` must implement the\n         * {@link module:core/editor/utils/elementapimixin~ElementApi} interface.\n         *\n         * @error attachtoform-missing-elementapi-interface\n         */\n        throw new CKEditorError('attachtoform-missing-elementapi-interface', editor);\n    }\n    const sourceElement = editor.sourceElement;\n    // Only when replacing a textarea which is inside of a form element.\n    if (isTextArea(sourceElement) && sourceElement.form) {\n        let originalSubmit;\n        const form = sourceElement.form;\n        const onSubmit = () => editor.updateSourceElement();\n        // Replace the original form#submit() to call a custom submit function first.\n        // Check if #submit is a function because the form might have an input named \"submit\".\n        if (isFunction(form.submit)) {\n            originalSubmit = form.submit;\n            form.submit = () => {\n                onSubmit();\n                originalSubmit.apply(form);\n            };\n        }\n        // Update the replaced textarea with data before each form#submit event.\n        form.addEventListener('submit', onSubmit);\n        // Remove the submit listener and revert the original submit method on\n        // editor#destroy.\n        editor.on('destroy', () => {\n            form.removeEventListener('submit', onSubmit);\n            if (originalSubmit) {\n                form.submit = originalSubmit;\n            }\n        });\n    }\n}\nfunction isTextArea(sourceElement) {\n    return !!sourceElement && sourceElement.tagName.toLowerCase() === 'textarea';\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * Implementation of the {@link module:core/editor/utils/dataapimixin~DataApi}.\n */\nexport default function DataApiMixin(base) {\n    class Mixin extends base {\n        setData(data) {\n            this.data.set(data);\n        }\n        getData(options) {\n            return this.data.get(options);\n        }\n    }\n    return Mixin;\n}\n// Backward compatibility with `mix`.\n{\n    const mixin = DataApiMixin(Object);\n    DataApiMixin.setData = mixin.prototype.setData;\n    DataApiMixin.getData = mixin.prototype.getData;\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core/editor/utils/elementapimixin\n */\nimport { CKEditorError, setDataInElement } from '@ckeditor/ckeditor5-utils';\n/**\n * Implementation of the {@link module:core/editor/utils/elementapimixin~ElementApi}.\n */\nexport default function ElementApiMixin(base) {\n    class Mixin extends base {\n        updateSourceElement(data) {\n            if (!this.sourceElement) {\n                /**\n                 * Cannot update the source element of a detached editor.\n                 *\n                 * The {@link module:core/editor/utils/elementapimixin~ElementApi#updateSourceElement `updateSourceElement()`}\n                 * method cannot be called if you did not pass an element to `Editor.create()`.\n                 *\n                 * @error editor-missing-sourceelement\n                 */\n                throw new CKEditorError('editor-missing-sourceelement', this);\n            }\n            const shouldUpdateSourceElement = this.config.get('updateSourceElementOnDestroy');\n            const isSourceElementTextArea = this.sourceElement instanceof HTMLTextAreaElement;\n            // The data returned by the editor might be unsafe, so we want to prevent rendering\n            // unsafe content inside the source element different than <textarea>, which is considered\n            // secure. This behavior could be changed by setting the `updateSourceElementOnDestroy`\n            // configuration option to `true`.\n            if (!shouldUpdateSourceElement && !isSourceElementTextArea) {\n                setDataInElement(this.sourceElement, '');\n                return;\n            }\n            const dataToSet = typeof data === 'string' ? data : this.data.get();\n            setDataInElement(this.sourceElement, dataToSet);\n        }\n    }\n    return Mixin;\n}\n// Backward compatibility with `mix`.\nElementApiMixin.updateSourceElement = ElementApiMixin(Object).prototype.updateSourceElement;\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core/editor/utils/securesourceelement\n */\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils';\n/**\n * Marks the source element on which the editor was initialized. This prevents other editor instances from using this element.\n *\n * Running multiple editor instances on the same source element causes various issues and it is\n * crucial this helper is called as soon as the source element is known to prevent collisions.\n *\n * @param editor Editor instance.\n * @param sourceElement Element to bind with the editor instance.\n */\nexport default function secureSourceElement(editor, sourceElement) {\n    if (sourceElement.ckeditorInstance) {\n        /**\n         * A DOM element used to create the editor (e.g.\n         * {@link module:editor-inline/inlineeditor~InlineEditor.create `InlineEditor.create()`})\n         * has already been used to create another editor instance. Make sure each editor is\n         * created with an unique DOM element.\n         *\n         * @error editor-source-element-already-used\n         * @param element DOM element that caused the collision.\n         */\n        throw new CKEditorError('editor-source-element-already-used', editor);\n    }\n    sourceElement.ckeditorInstance = editor;\n    editor.once('destroy', () => {\n        delete sourceElement.ckeditorInstance;\n    });\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core/pendingactions\n */\nimport ContextPlugin from './contextplugin';\nimport { CKEditorError, Collection, ObservableMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * The list of pending editor actions.\n *\n * This plugin should be used to synchronise plugins that execute long-lasting actions\n * (e.g. file upload) with the editor integration. It gives the developer who integrates the editor\n * an easy way to check if there are any actions pending whenever such information is needed.\n * All plugins that register a pending action also provide a message about the action that is ongoing\n * which can be displayed to the user. This lets them decide if they want to interrupt the action or wait.\n *\n * Adding and updating a pending action:\n *\n * ```ts\n * const pendingActions = editor.plugins.get( 'PendingActions' );\n * const action = pendingActions.add( 'Upload in progress: 0%.' );\n *\n * // You can update the message:\n * action.message = 'Upload in progress: 10%.';\n * ```\n *\n * Removing a pending action:\n *\n * ```ts\n * const pendingActions = editor.plugins.get( 'PendingActions' );\n * const action = pendingActions.add( 'Unsaved changes.' );\n *\n * pendingActions.remove( action );\n * ```\n *\n * Getting pending actions:\n *\n * ```ts\n * const pendingActions = editor.plugins.get( 'PendingActions' );\n *\n * const action1 = pendingActions.add( 'Action 1' );\n * const action2 = pendingActions.add( 'Action 2' );\n *\n * pendingActions.first; // Returns action1\n * Array.from( pendingActions ); // Returns [ action1, action2 ]\n * ```\n *\n * This plugin is used by features like {@link module:upload/filerepository~FileRepository} to register their ongoing actions\n * and by features like {@link module:autosave/autosave~Autosave} to detect whether there are any ongoing actions.\n * Read more about saving the data in the {@glink installation/getting-started/getting-and-setting-data Saving and getting data} guide.\n */\nexport default class PendingActions extends ContextPlugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'PendingActions';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        this.set('hasAny', false);\n        this._actions = new Collection({ idProperty: '_id' });\n        this._actions.delegate('add', 'remove').to(this);\n    }\n    /**\n     * Adds an action to the list of pending actions.\n     *\n     * This method returns an action object with an observable message property.\n     * The action object can be later used in the {@link #remove} method. It also allows you to change the message.\n     *\n     * @param message The action message.\n     * @returns An observable object that represents a pending action.\n     */\n    add(message) {\n        if (typeof message !== 'string') {\n            /**\n             * The message must be a string.\n             *\n             * @error pendingactions-add-invalid-message\n             */\n            throw new CKEditorError('pendingactions-add-invalid-message', this);\n        }\n        const action = new (ObservableMixin())();\n        action.set('message', message);\n        this._actions.add(action);\n        this.hasAny = true;\n        return action;\n    }\n    /**\n     * Removes an action from the list of pending actions.\n     *\n     * @param action An action object.\n     */\n    remove(action) {\n        this._actions.remove(action);\n        this.hasAny = !!this._actions.length;\n    }\n    /**\n     * Returns the first action from the list or null if the list is empty\n     *\n     * @returns The pending action object.\n     */\n    get first() {\n        return this._actions.get(0);\n    }\n    /**\n     * Iterable interface.\n     */\n    [Symbol.iterator]() {\n        return this._actions[Symbol.iterator]();\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module core\n */\nexport { default as Plugin } from './plugin';\nexport { default as Command } from './command';\nexport { default as MultiCommand } from './multicommand';\nexport { default as Context } from './context';\nexport { default as ContextPlugin } from './contextplugin';\nexport { default as Editor } from './editor/editor';\nexport { default as attachToForm } from './editor/utils/attachtoform';\nexport { default as DataApiMixin } from './editor/utils/dataapimixin';\nexport { default as ElementApiMixin } from './editor/utils/elementapimixin';\nexport { default as secureSourceElement } from './editor/utils/securesourceelement';\nexport { default as PendingActions } from './pendingactions';\nimport cancel from './../theme/icons/cancel.svg';\nimport caption from './../theme/icons/caption.svg';\nimport check from './../theme/icons/check.svg';\nimport cog from './../theme/icons/cog.svg';\nimport eraser from './../theme/icons/eraser.svg';\nimport history from './../theme/icons/history.svg';\nimport lowVision from './../theme/icons/low-vision.svg';\nimport textAlternative from './../theme/icons/text-alternative.svg';\nimport loupe from './../theme/icons/loupe.svg';\nimport image from './../theme/icons/image.svg';\nimport alignBottom from './../theme/icons/align-bottom.svg';\nimport alignMiddle from './../theme/icons/align-middle.svg';\nimport alignTop from './../theme/icons/align-top.svg';\nimport alignLeft from './../theme/icons/align-left.svg';\nimport alignCenter from './../theme/icons/align-center.svg';\nimport alignRight from './../theme/icons/align-right.svg';\nimport alignJustify from './../theme/icons/align-justify.svg';\nimport objectBlockLeft from './../theme/icons/object-left.svg';\nimport objectCenter from './../theme/icons/object-center.svg';\nimport objectBlockRight from './../theme/icons/object-right.svg';\nimport objectFullWidth from './../theme/icons/object-full-width.svg';\nimport objectInline from './../theme/icons/object-inline.svg';\nimport objectLeft from './../theme/icons/object-inline-left.svg';\nimport objectRight from './../theme/icons/object-inline-right.svg';\nimport objectSizeFull from './../theme/icons/object-size-full.svg';\nimport objectSizeLarge from './../theme/icons/object-size-large.svg';\nimport objectSizeSmall from './../theme/icons/object-size-small.svg';\nimport objectSizeMedium from './../theme/icons/object-size-medium.svg';\nimport pencil from './../theme/icons/pencil.svg';\nimport pilcrow from './../theme/icons/pilcrow.svg';\nimport quote from './../theme/icons/quote.svg';\nimport threeVerticalDots from './../theme/icons/three-vertical-dots.svg';\nimport dragIndicator from './../theme/icons/drag-indicator.svg';\nimport bold from './../theme/icons/bold.svg';\nimport paragraph from './../theme/icons/paragraph.svg';\nimport plus from './../theme/icons/plus.svg';\nimport text from './../theme/icons/text.svg';\nimport importExport from './../theme/icons/importexport.svg';\nexport const icons = {\n    bold,\n    cancel,\n    caption,\n    check,\n    cog,\n    eraser,\n    history,\n    image,\n    lowVision,\n    textAlternative,\n    loupe,\n    importExport,\n    paragraph,\n    plus,\n    text,\n    alignBottom,\n    alignMiddle,\n    alignTop,\n    alignLeft,\n    alignCenter,\n    alignRight,\n    alignJustify,\n    objectLeft,\n    objectCenter,\n    objectRight,\n    objectFullWidth,\n    objectInline,\n    objectBlockLeft,\n    objectBlockRight,\n    objectSizeFull,\n    objectSizeLarge,\n    objectSizeSmall,\n    objectSizeMedium,\n    pencil,\n    pilcrow,\n    quote,\n    threeVerticalDots,\n    dragIndicator\n};\nimport './augmentation';\n"],
  "mappings": "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",
  "names": ["forceDisable", "pluginsToRemove", "plugins", "plugin", "pluginConstructors", "pluginInstances", "pluginsSubstitutions", "Plugin", "cancel"]
}
